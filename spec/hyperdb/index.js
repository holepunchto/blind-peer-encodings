// This file is autogenerated by the hyperdb compiler
/* eslint-disable camelcase */

const { IndexEncoder, c } = require('hyperdb/runtime')
const { version, getEncoding, setVersion } = require('./messages.js')

// '@blind-peer/mailbox' collection key
const collection0_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 0 })

function collection0_indexify (record) {
  const a = record.id
  return a === undefined ? [] : [a]
}

// '@blind-peer/mailbox' value encoding
const collection0_enc = getEncoding('@blind-peer/mailbox/hyperdb#0')

// '@blind-peer/mailbox' reconstruction function
function collection0_reconstruct (version, keyBuf, valueBuf) {
  const key = collection0_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection0_enc, valueBuf)
  record.id = key[0]
  return record
}
// '@blind-peer/mailbox' key reconstruction function
function collection0_reconstruct_key (keyBuf) {
  const key = collection0_key.decode(keyBuf)
  return {
    id: key[0]
  }
}

// '@blind-peer/mailbox'
const collection0 = {
  name: '@blind-peer/mailbox',
  id: 0,
  encodeKey (record) {
    const key = [record.id]
    return collection0_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection0_key.encodeRange({
      gt: gt ? collection0_indexify(gt) : null,
      lt: lt ? collection0_indexify(lt) : null,
      gte: gte ? collection0_indexify(gte) : null,
      lte: lte ? collection0_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    setVersion(version)
    return c.encode(collection0_enc, record)
  },
  trigger: null,
  reconstruct: collection0_reconstruct,
  reconstructKey: collection0_reconstruct_key,
  indexes: []
}

// '@blind-peer/mailbox-by-autobase' collection key
const index1_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 1 })

function index1_indexify (record) {
  const a = record.autobase
  return a === undefined ? [] : [a]
}

// '@blind-peer/mailbox-by-autobase'
const index1 = {
  name: '@blind-peer/mailbox-by-autobase',
  id: 1,
  encodeKey (record) {
    return index1_key.encode(index1_indexify(record))
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return index1_key.encodeRange({
      gt: gt ? index1_indexify(gt) : null,
      lt: lt ? index1_indexify(lt) : null,
      gte: gte ? index1_indexify(gte) : null,
      lte: lte ? index1_indexify(lte) : null
    })
  },
  encodeValue: (doc) => index1.collection.encodeKey(doc),
  encodeIndexKeys (record, context) {
    return [index1_key.encode([record.autobase])]
  },
  reconstruct: (keyBuf, valueBuf) => valueBuf,
  offset: collection0.indexes.length,
  collection: collection0
}
collection0.indexes.push(index1)

// '@blind-peer/seeds' collection key
const collection2_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 2 })

function collection2_indexify (record) {
  const a = record.swarm
  return a === undefined ? [] : [a]
}

// '@blind-peer/seeds' value encoding
const collection2_enc = getEncoding('@blind-peer/seeds/hyperdb#2')

// '@blind-peer/seeds' reconstruction function
function collection2_reconstruct (version, keyBuf, valueBuf) {
  const key = collection2_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection2_enc, valueBuf)
  record.swarm = key[0]
  return record
}
// '@blind-peer/seeds' key reconstruction function
function collection2_reconstruct_key (keyBuf) {
  const key = collection2_key.decode(keyBuf)
  return {
    swarm: key[0]
  }
}

// '@blind-peer/seeds'
const collection2 = {
  name: '@blind-peer/seeds',
  id: 2,
  encodeKey (record) {
    const key = [record.swarm]
    return collection2_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection2_key.encodeRange({
      gt: gt ? collection2_indexify(gt) : null,
      lt: lt ? collection2_indexify(lt) : null,
      gte: gte ? collection2_indexify(gte) : null,
      lte: lte ? collection2_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    setVersion(version)
    return c.encode(collection2_enc, record)
  },
  trigger: null,
  reconstruct: collection2_reconstruct,
  reconstructKey: collection2_reconstruct_key,
  indexes: []
}

const collections = [
  collection0,
  collection2
]

const indexes = [
  index1
]

module.exports = { version, collections, indexes, resolveCollection, resolveIndex }

function resolveCollection (name) {
  switch (name) {
    case '@blind-peer/mailbox': return collection0
    case '@blind-peer/seeds': return collection2
    default: return null
  }
}

function resolveIndex (name) {
  switch (name) {
    case '@blind-peer/mailbox-by-autobase': return index1
    default: return null
  }
}
